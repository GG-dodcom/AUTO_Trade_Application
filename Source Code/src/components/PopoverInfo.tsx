"use client";

//Example Usage
{
	/* <PopoverInfo
	type="question"
	content={
		<>
			<h3 className="font-semibold text-gray-900 dark:text-white">
				Activity Growth - Incremental
			</h3>
			<p className="text-sm">
				Report helps navigate cumulative growth of community activities.
				Ideally, the chart should have a growing trend, as stagnating chart
				signifies a significant decrease of community activity.
			</p>
			<h3 className="font-semibold text-gray-900 dark:text-white mt-2">
				Calculation
			</h3>
			<p className="text-sm">
				For each date bucket, the all-time volume of activities is calculated.
				This means that activities in period <b>n</b> contain all activities up
				to period <b>n</b>, plus the activities generated by your community in
				period.
			</p>
			<a
				href="#"
				className="flex items-center font-medium text-blue-600 dark:text-blue-500 dark:hover:text-blue-600 hover:text-blue-700 hover:underline mt-2"
			>
				Read more
				<svg
					className="w-2 h-2 ml-1 rtl:rotate-180"
					aria-hidden="true"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 6 10"
				>
					<path
						stroke="currentColor"
						strokeLinecap="round"
						strokeLinejoin="round"
						strokeWidth="2"
						d="m1 9 4-4-4-4"
					/>
				</svg>
			</a>
		</>
	}
/>;  */
}

import { QuestionCircle } from "@/assets/icons";
import { useState, useRef } from "react";

interface Props {
	type: "question";
	content: React.ReactNode;
}

const PopoverInfo: React.FC<Props> = ({ type, content }) => {
	const [isOpen, setIsOpen] = useState(false);
	const popoverRef = useRef<HTMLDivElement | null>(null);
	const iconRef = useRef<HTMLDivElement | null>(null);
	const timeoutRef = useRef<NodeJS.Timeout | null>(null);

	const handleMouseEnter = () => {
		// Clear any timeout so popover doesn't close when moving between icon & popover
		if (timeoutRef.current) {
			clearTimeout(timeoutRef.current);
		}
		setIsOpen(true);
	};

	const handleMouseLeave = (event: React.MouseEvent) => {
		// Check if the mouse is moving to either the popover or the icon
		if (
			popoverRef.current?.contains(event.relatedTarget as Node) ||
			iconRef.current?.contains(event.relatedTarget as Node)
		) {
			return; // Do nothing if mouse moves inside popover or icon
		}

		// Add slight delay before closing
		timeoutRef.current = setTimeout(() => {
			setIsOpen(false);
		}, 200);
	};

	return (
		<div className="relative inline-block">
			{/* Icon to Hover */}
			<div
				ref={iconRef}
				onMouseEnter={handleMouseEnter}
				onMouseLeave={handleMouseLeave}
			>
				<QuestionCircle className="w-5 h-5 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white cursor-pointer" />
			</div>

			{/* Popover Content */}
			<div
				ref={popoverRef}
				className={`absolute z-10 transform -translate-x-[50%] mt-2 w-72 bg-white border border-gray-200 rounded-lg shadow-lg dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400 p-4 
          transition-all duration-100 ease-out 
          ${
						isOpen
							? "opacity-100 translate-y-0 scale-100"
							: "opacity-0 pointer-events-none"
					}`}
				onMouseEnter={handleMouseEnter}
				onMouseLeave={handleMouseLeave}
			>
				{content}
			</div>
		</div>
	);
};

export default PopoverInfo;
